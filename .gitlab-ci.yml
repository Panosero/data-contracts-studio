stages:
  - test
  - security
  - build
  - deploy

variables:
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"
  DOCKER_TLS_CERTDIR: "/certs"

# Backend Tests
backend-test:
  stage: test
  image: python:${PYTHON_VERSION}
  cache:
    paths:
      - backend/.pip-cache/
  before_script:
    - cd backend
    - pip install --cache-dir .pip-cache -r requirements.txt
  script:
    - pytest --cov=app --cov-report=xml --cov-report=term
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage.xml
  coverage: '/TOTAL.*\s+(\d+%)$/'

# Frontend Tests
frontend-test:
  stage: test
  image: node:${NODE_VERSION}
  cache:
    paths:
      - frontend/node_modules/
  before_script:
    - cd frontend
    - npm ci
  script:
    - npm test -- --coverage --watchAll=false
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/cobertura-coverage.xml

# Security Scanning
security-scan:
  stage: security
  image: aquasec/trivy:latest
  script:
    - trivy fs --format template --template "@contrib/gitlab.tpl" -o gl-sast-report.json .
  artifacts:
    reports:
      sast: gl-sast-report.json

# Build Docker Images
build-backend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd backend
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA .
    - docker tag $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/backend:latest
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/backend:latest
  only:
    - main

build-frontend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd frontend
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA .
    - docker tag $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/frontend:latest
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/frontend:latest
  only:
    - main

# Deploy to GitLab Pages
pages:
  stage: deploy
  image: node:${NODE_VERSION}
  cache:
    paths:
      - frontend/node_modules/
  before_script:
    - cd frontend
    - npm ci
  script:
    - npm run build
    - mv build ../public
  artifacts:
    paths:
      - public
  environment:
    name: pages
    url: $CI_PAGES_URL
  only:
    - main

# Deploy to Server
deploy-server:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
  script:
    - ssh $SERVER_USER@$SERVER_HOST "cd /path/to/your/app && git pull origin main && chmod +x scripts/deploy-server.sh && ./scripts/deploy-server.sh"
  environment:
    name: production
    url: https://your-production-url.com
  only:
    - main
  when: manual
