# Multi-stage Dockerfile optimized for Podman and Frontend
FROM node:18-alpine AS base

# Version information
ARG VERSION=0.0.1
ARG REACT_APP_API_URL=http://localhost:8888/api/v1
LABEL version=${VERSION}
LABEL description="Data Contracts Studio Frontend"
LABEL maintainer="Data Contracts Studio Team"

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache curl

# Use existing node user (uid 1000, gid 1000)
# No need to create new user as node:18-alpine already has node user with ID 1000

WORKDIR /app

# Development stage
FROM base AS development
ENV NODE_ENV=development

# Copy package files
COPY --chown=node:node package*.json ./
RUN npm ci --include=dev

# Copy source code
COPY --chown=node:node . .

# Switch to non-root user
USER node

# Expose port
EXPOSE 3333

# Development command with hot reload
CMD ["npm", "start"]

# Build stage
FROM base AS build
ENV NODE_ENV=production

# Copy package files
COPY package*.json ./
RUN npm ci --only=production --no-audit

# Copy source code
COPY . .

# Set build-time environment variables
ENV REACT_APP_API_URL=${REACT_APP_API_URL}

# Build the application
RUN npm run build

# Production stage
FROM nginx:alpine AS production

# Install security updates
# Install security updates
RUN apk update && apk upgrade && apk add --no-cache curl

# Copy built application
COPY --from=build /app/build /usr/share/nginx/html

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
